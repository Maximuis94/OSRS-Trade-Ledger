"""
Module with various widgets for displaying information in the GUI;
listed in the grid, given a list of strings.
Labels (pretty straightforward...)
Pop-up windows; small interfaces that are generated by the GUI for a single purpose.
E.g. show a detailed explanation, get user input (set configs, manually alter entries, ...)
Pop-up windows are usually removed once they have served their purpose.
The listbox has a separate module.

"""
import tkinter as tk
from collections.abc import Iterable
from tkinter import ttk

from gui.model.grid import TkGrid
from gui.model.gui_widget import GuiWidget


class GuiLabel(ttk.Label, GuiWidget):
    """
    Class for a label.
    
    """
    def __init__(self, frame, grid: TkGrid, grid_tag: str, text: str = None, text_variable: tk.StringVar = None,
                 event_bindings: Iterable = None, **kwargs):
        """ Class for setting up tk label widget.
        A tk.Label built on top of the given frame with frequently used attributes, used to define tk elements in a
        standardized fashion. Commonly tweaked parameters can be passed as well. All parameters with the exception of
        grid correspond to attributes used in original tk objects.

        Parameters
        ----------
        frame : ttk.Frame
            The ttk frame on which the Label will be placed.

        Attributes
        ----------
        frame : ttk.Frame
            Frame on which the object will be placed

        Methods
        -------
        set_text(string)
            Method for changing the text displayed by the label
        """
        self.text_variable = tk.StringVar(self.frame) if text_variable is None else text_variable
        if text is not None:
            self.text_variable.set(text)
        
        super().__init__(textvariable=self.text_variable, **kwargs)
        super(GuiWidget, self).__init__(frame, grid_tag, grid, event_bindings=event_bindings, **kwargs)
        
    def set_text(self, text: str):
        """ Display the given `text` string in this label """
        if not isinstance(text, str):
            text = str(text)
        self.text_variable.set(text)
    
    def get_text(self) -> str:
        """ Get the text displayed by this label """
        return self.text_variable.get()


if __name__ == "__main__":
    ...