"""
This module contains various methods for generating a specific clause that can be used as part of an SQLite statement.


"""
from collections.abc import Iterable
from typing import Tuple

from multipledispatch import dispatch


@dispatch(Iterable)
def select_columns(to_select: Iterable[str] or str = None):
    if to_select is None:
        return "SELECT * "
    elif isinstance(to_select, str):
        return f"SELECT {to_select} "
    else:
        return f"SELECT {str(tuple(to_select))}, "


@dispatch(Iterable, str)
def select_columns(to_select: Iterable[str] or str = None, alias: str = None) -> str:
    """
    Generate a statement for selecting a specified group of columns. If an alias is passed, use SELECT AS instead. Note
    that is it possible to combine multiple strings generated by this method.
    
    Parameters
    ----------
    to_select : Iterable[str] or str, optional, None by default
        One or more variables/values that are to be targeted by the SELECT statement. By default it is set to '*', which
        means all columns will be selected.
    alias : str, optional, None by default
        If passed, variables/values in `to_select` will be used in a SELECT ... AS ... statement instead.

    Returns
    -------
    
    
    Examples
    --------
    SELECT src, item_id, timestamp, price, volume FROM ...
    SELECT src, item_id, timestamp, price, volume AS row FROM ...
    SELECT DISTINCT item_id FROM ...

    """
    alias = "" if alias is None else f"AS {alias} "
    sql = "SELECT "
    